{"project":{"id":30,"title":"Lite Editor","order":1},"categories":[{"name":"Getting Started","projectId":30,"order":1,"id":100,"entries":[{"title":"Introduction","categoryId":100,"projectId":30,"id":0,"markdown":"# Introduction\n\n## Heading1\nLorem ipsum dolor sit amet, consectetur adipisicing elit. Pariatur sint fugit adipisci ratione culpa ab porro veritatis atque, vel et quidem nobis modi! Labore quod voluptas dolorem quisquam alias, sit.\n\n- hoge\n- hoge2\n\n  "}]},{"name":"API","projectId":30,"order":2,"id":"JAEP53MPJN0R8","entries":[{"projectId":30,"categoryId":"JAEP53MPJN0R8","title":"Options","id":"JAEP9ETWSIZ05","markdown":"# Options\n\nSome options are available when making a new instance like below.\n\n```js\nconst editor = new LiteEditor('js-editor', {\n    nl2br: false\n});\n```\nThese are the option.\n\n| property | description | default |\n|:-----------|------------:|:------------:|\n| minHeight | min height of the editor | 50 |\n| maxHeight | max height of the editor | 400 |\n| will       | will        | will         |\n| be         | be          | be           |\n| left       | right       | center       |\n| aligned    | aligned     | aligned      |","fileName":"options.html"},{"projectId":30,"categoryId":"JAEP53MPJN0R8","title":"Methods","id":"JAEP9KQ03X2CH","markdown":"# Methods"},{"projectId":30,"categoryId":"JAEP53MPJN0R8","title":"Events","id":"JAEP9NMCM3EPM","markdown":"# Events"}]}],"entries":[{"title":"About","categoryId":100,"projectId":30,"id":0,"markdown":"# About\n\nLite Editor is a free to use and customizable WYSIWYG Editor. \nA vanillaJS plugin you can easily use like below\n\n```js\nconst editor = new LiteEditor('.js-editor');\n```\n\n## Installation\n\nvia cdn\n\n```html\n<script src=\"https://unpkg.com/lite-editor@1.4.0/js/lite-editor.min.js\"></script>\n<link rel=\"stylesheet\" href=\"https://unpkg.com/lite-editor@1.4.0/css/lite-editor.css\">\n```\n\nvia npm\n```sh\nnpm install lite-editor --save\n```\n\nor yarn\n\n```sh\nyarn add lite-editor\n```\n\nAfter installing it via npm,  You can import it easily with webpack or browserify\n\n```js\nimport LiteEditor from 'lite-editor';\n\nconst editor = new LiteEditor('.js-editor');\n```","fileName":"about.html"},{"projectId":30,"categoryId":"JAEP53MPJN0R8","title":"Options","id":"JAEP9ETWSIZ05","markdown":"# Options\n\nSome options are available when making new instances like below.\n\n```js\nconst editor = new LiteEditor('js-editor', {\n    nl2br: false\n});\n```\nThese are the option.\n\n```js\nconst editor = new LiteEditor('js-editor', {\n  classNames: {\n    LiteEditor: 'lite-editor',\n    LiteEditorSource: 'lite-editor-source',\n    LiteEditorBtn: 'lite-editor-btn',\n    LiteEditorBtnClose: 'lite-editor-btn-close',\n    LiteEditorBtnActive: 'lite-editor-btn-active',\n    LiteEditorBtnGroup: 'lite-editor-btn-group',\n    LiteEditorBtnGroupWrap: 'lite-editor-btn-group-wrap',\n    LiteEditorBtnGroupWrapRight: 'lite-editor-btn-group-wrap-right',\n    LiteEditorBtnCloseWrap: 'lite-editor-btn-close-wrap',\n    LiteEditorBtnCloseLabel: 'lite-editor-btn-close-label',\n    LiteEditorSelect: 'lite-editor-select',\n    LiteEditorSelectWrap: 'lite-editor-select-wrap',\n    LiteEditorToolBox: 'lite-editor-toolbox',\n    LiteEditorTooltip: 'lite-editor-tooltip',\n    LiteEditorTooltipWrap: 'lite-editor-tooltip-wrap',\n    LiteEditorTooltipOuter: 'lite-editor-tooltip-outer',\n    LiteEditorTooltipInner: 'lite-editor-tooltip-inner',\n    LiteEditorTooltipTable: 'lite-editor-tooltip-table',\n    LiteEditorTooltipTitle: 'lite-editor-tooltip-title',\n    LiteEditorTooltipBody: 'lite-editor-tooltip-body',\n    LiteEditorTooltipInput: 'lite-editor-tooltip-input',\n    LiteEditorExtendInput: 'lite-editor-extend-input',\n    LiteEditorFontLink: 'lite-editor-font-link',\n    LiteEditorFontRemove: 'lite-editor-font-remove',\n    LiteEditorFontUpdate: 'lite-editor-font-update',\n    LiteEditorFontClose: 'lite-editor-font-close',\n    LiteEditorFontSource: 'lite-editor-font-source',\n    LiteEditorFontAbc: 'lite-editor-font-abc'\n  },\n  message: {\n    addLinkTitle: 'link',\n    updateLinkTitle: 'link',\n    addLink: 'add',\n    updateLink: 'update',\n    removeLink: 'remove',\n    linkUrl: 'URL',\n    linkLabel: 'label',\n    closeLabel: 'close'\n  },\n  minHeight: 50,\n  maxHeight: 400,\n  sourceFirst: false,\n  escapeNotRegisteredTags: false,\n  preserveSpace: false,\n  nl2br: true,\n  source: true,\n  btnOptions: defaultbtnOptions,\n  btnPosition: 'top'\n});\n```\n\n### minHeight\n\nminheight of the editor\n\n### maxHeight\n\nmaxheight of the editor\n\n### sourceFirst\n\nShow source first when the editor is created\n\n### escapeNotRegisteredTags\n\nWhen inserting the html and the tag is not registered as a button, it will be escaped.\n\n### nl2br\n\nConvert linebreaks to <br> tags\n\n### source\n\nIf you want to show the original textarea source, set it true.\n\n### btnOptions\n\nYou can make the original buttons for the editor with this option.\n\n### btnPosition\n\nYou can change the place of buttons.\n`top` or `bottom`\n\n### classNames\nFrom here, you can change the classnames of the editor.\n\n### message\n\nSometimes, you may want to change some labels of the editor, Suppose that the user of the editor is Japanese, You can make editor  Japanese from here.","fileName":"options.html"},{"projectId":30,"categoryId":"JAEP53MPJN0R8","title":"Custom Buttons","id":"JAEP9KQ03X2CH","markdown":"# Custom Buttons\n\nBelow is the basic JS for creating a custom button and register it to the editor.\n\n\n```js\neditor.registerButton({\n  label: 'blue',\n  tag: 'span',\n  className: 'blue',\n  group: 'mark'    \n});\n```\n\nIf you want to make button groups from the scratch...\n\n```js\nconst btnOptions = [\n    {\n      label: '<i class=\"fa fa-link\"></i>',\n      tag: 'a',\n      className: '',\n      group: 'mark'\n    },\n    {\n      label: '<i class=\"fa fa-bold\"></i>',\n      tag: 'strong',\n      className: '',\n      group: 'mark'\n    },\n    {\n      label: '<i class=\"fa fa-italic\"></i>',\n      tag: 'i',\n      className: '',\n      group: 'mark'\n    },\n    {\n      label: 'red',\n      tag: 'span',\n      className: 'red',\n      group: 'mark'\n    }\n];\n\nconst editor = new LiteEditor('.jseditor', {\n    btnOptions\n});\n```","fileName":"custom-buttons.html"},{"projectId":30,"categoryId":"JAEP53MPJN0R8","title":"Events","id":"JAEP9NMCM3EPM","markdown":"# Events\n\nIf you have to customize the editor, you may want to hook some actions and add  original functions\n\nYou can easily hook events like below.\n\n```js\neditor.on('render', () => {\n    /* write some codes here */\n});\n```\nThis is the list of the event you can hook.\n\n- `render` after updating the editor\n- `prerender` before updating the editor\n- `insertTag` after inserting a tag\n- `unwrapTag` after unwrapping a tag\n- `redo` after redo\n- `undo` after undo\n- `paste` after pasting","fileName":"event.html"},{"projectId":30,"categoryId":"JAEP53MPJN0R8","title":"Methods","id":"JAEZZKCKLZQY2","markdown":"# Methods\n\nMethods are actions done by LiteEditor instances.\nVanilla JS methods look like `editor.methodName( /* arguments */ )`.\nBelow is the example of the code.\n\n```js\neditor.redo();\n```\n\n### registerButton (btnOption)\n\nAdd a new button to the editor.\n\n### saveSelection ()\n\nSave a selected area.\n\n### restoreSelection ()\n\nRestore a selected area.\n\n### insertTag (tag, className, sampleText)\n\nInsert a tag to a selected area.\n\n### undo ()\n\nGo back to the previous state.\n\n### redo ()\n\nGo forward to the next state.","fileName":"methods.html"}]}